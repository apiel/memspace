var fs = require('fs');
var path = require('path');
var ms = require('memspace');
//var express = require('express');

module.exports = data;

data.path = null;
data.routes = null;

data.getPath = function() {
    if (this.path === null) {
        var _path = path.join(ms.memspace.getPathName(), 'data');
        if (fs.existsSync(_path)) {
            this.path = _path;
        }
        else {
            throw 'Path to data folder does not exist: ' + _path;
        }
    }
    return this.path;
};

data.getRoutes = function() {
    if (this.routes === null) {
        var _path = path.join(ms.memspace.getPathName(), 'routes.json');
        if (fs.existsSync(_path)) {
            data.routes = JSON.parse(fs.readFileSync(_path, 'utf8'));  
        }
        else {
            throw 'Path to routes does not exist: ' + _path;
        }
    }
    return this.routes;
};

data.routeIsValid = function(route) {
    var valid = false;
    if (typeof(route.group) !== 'string') {
        throw 'Route group has to be a string. ::' + typeof(route.group);
    }
    else if (typeof(route.modes) !== 'object' || !Array.isArray(route.modes)) {
        throw 'Route modes has to be an array. ::' + typeof(route.modes);
    }
    else {
        valid = true;
    }
    return valid;
};

data.getRoute = function(key) {
    var route = null;
    var routes = this.getRoutes();
    if (typeof(routes[key]) !== 'undefined') {
        if (this.routeIsValid(routes[key])) {
            route = routes[key];
        }
        else {
            throw 'Route is not valid'
        }
    }
    else {
        throw 'Route does not exist.';
    }
    return route;
};

data.hasPermission = function(route, user, mode) {
    var hasPermission = false;
    if (route.modes.indexOf(mode) !== -1) {
        if (ms.user.hasPermission(user, route.group, mode)) {
            hasPermission = true;
        }
        else {
            throw 'User does not have permission to '+mode+' this route.';
        }
    }
    else {
        throw 'Route is not readable.';
    }
    return hasPermission;
};

data.read = function(key, forUser) {
    var content = null;
    var route = this.getRoute(key);
    if (route !== null && this.hasPermission(route, forUser, 'read')) {
        content = fs.readFileSync(this.getFilePath(key), 'binary');
    }
    return content;
};

data.write = function(key, forUser, content) {
    var route = this.getRoute(key);
    if (route !== null && this.hasPermission(route, forUser, 'write')) {
        fs.writeFileSync(this.getFilePath(key), content, 'binary');
    }
    return this;
};

data.getFilePath = function(key) {
    return path.join(this.getPath(), key);
};

function data() {
    
}