var fs = require('fs');
var path = require('path');
var crypto = require('crypto');
var ms = require('memspace');

module.exports = user;

user.path = null;

user.getPath = function() {
    if (this.path === null) {
        var _path = path.join(ms.memspace.getPathName(), 'users');
        if (fs.existsSync(_path)) {
            this.path = _path;
        }
        else {
            throw 'Path to user folder does not exist: ' + _path;
        }
    }
    return this.path;
};

user.loadByUsername = function(username) {
    var _path = path.join(this.getPath(), username+'.json');
    var user = null;
    if (fs.existsSync(_path)) {
        user = JSON.parse(fs.readFileSync(_path, 'utf8'));    
    }
    else {
        throw 'Username does not exist: ' + username;
    }
    return user;
}

user.loadBySession = function(sessionId) {
    var user = null;
    if (typeof(sessionId) === 'undefined' || !sessionId.length) {
        throw 'sessionId cannot be empty.';
    }
    else {
        var session = ms.session.load(sessionId);
        if (typeof(session) !== 'undefined') {            
            user = this.loadByUsername(session.username);
        }
        if (user && typeof(user) !== 'undefined') {
            delete user.auth;
        }
        else{
            throw 'SessionId invalid.';
        }
    }
    return user;
}

user.auth = function(username, password, duration) {
    var auth = null;
    if (typeof(username) === 'undefined' || !username.length
     || typeof(password) === 'undefined' || !password.length) {
        throw 'Username and password cannot be empty.';
    }
    else {
        var user = this.loadByUsername(username);
        if (typeof(user) !== 'undefined' 
         && typeof(user.auth.password) !== 'undefined'
         && typeof(user.auth.salt) !== 'undefined' 
         && hash(password, user.auth.salt) === user.auth.password) {
            delete user.auth;
            auth = {
                'sessionId': ms.session.generateId(),
                'user' : user
            };
            ms.session.save(auth.sessionId, {
                'memspace': ms.memspace.getPathName(), //maybe we shhould get the name..
                'username': username
            }, duration);
        }
        else{
            throw 'Password invalid.';
        }
    }
    return auth;
}

user.getGroups = function(_user) {
    var groups = null;
    if (typeof(_user.groups) === 'undefined') {
        throw 'User groups are not defined.';
    }
    else if (typeof(_user.groups) !== 'object') {
        throw 'User groups is not an object.'
    }
    else {
        groups = _user.groups;
    }
    return groups;
};

user.getGroup = function(_user, key) {
    var group = null;
    var groups = this.getGroups(_user);
    if (groups !== null) {
        if (typeof(groups[key]) !== 'object' || !Array.isArray(groups[key])) {
            throw 'User is not part of the group: ' + key;
        }
        else {
            group = groups[key];
        }
    }
    return group;
};

user.hasPermission = function(_user, group, mode) {
    var _group = this.getGroup(_user, group);
    return _group.indexOf(mode) !== -1;
};

var hash = function(password, salt) {
    return crypto.createHmac('sha256', salt).update(password).digest('hex');
};

function user() {
    
}